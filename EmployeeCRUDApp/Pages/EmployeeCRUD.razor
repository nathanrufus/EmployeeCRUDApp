
@page "/employee"
@inject EmployeeService EmployeeService
@inject PositionService PositionService
@inject ProgramService ProgramService
@inject NavigationManager NavigationManager
@using EmployeeCRUDApp.Services
@using EmployeeCRUDApp.Data

<h3>@(EmployeeModel.EmployeeID == 0 ? "Add Employee" : "Edit Employee")</h3>

@if (IsLoading)
{
    <p>Loading data...</p>
}
else
{
    <EditForm Model="EmployeeModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-container">
            <label>First Name:</label>
            <InputText class="form-input" @bind-Value="EmployeeModel.FirstName" />

            <label>Last Name:</label>
            <InputText class="form-input" @bind-Value="EmployeeModel.LastName" />

            <label>Position:</label>
            <InputSelect class="form-input" @bind-Value="EmployeeModel.PositionID">
                <option value="">-- Select Position --</option>
                @foreach (var pos in Positions)
                {
                    <option value="@pos.PositionID">@pos.Description</option>
                }
            </InputSelect>

            <label>Program:</label>
            <InputSelect class="form-input" @bind-Value="EmployeeModel.ProgramID">
                <option value="">-- Select Program --</option>
                @foreach (var prog in Programs)
                {
                    <option value="@prog.ProgramID">@prog.ProgramName</option>
                }
            </InputSelect>

            <button type="submit" class="btn-save">Save</button>
            <button type="button" @onclick="HandleCancel" class="btn-cancel">Cancel</button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int? id { get; set; }
    private Employee EmployeeModel = new();
    private List<Position> Positions = new();
    private List<Program> Programs = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownData();

        if (id.HasValue && id.Value > 0) // Edit Mode: Fetch employee by ID
        {
            var employee = await EmployeeService.GetEmployeeByIdAsync(id.Value);
            if (employee != null)
            {
                EmployeeModel = employee;
            }
            else
            {
                // If not found, navigate back
                NavigationManager.NavigateTo("/");
            }
        }

        IsLoading = false;
    }

    private async Task LoadDropdownData()
    {
        Positions = await PositionService.GetPositionsAsync();
        Programs = await ProgramService.GetProgramsAsync();
    }

    private async Task HandleSubmit()
    {
        if (EmployeeModel.EmployeeID == 0)
            await EmployeeService.AddEmployeeAsync(EmployeeModel);
        else
            await EmployeeService.UpdateEmployeeAsync(EmployeeModel);

        NavigationManager.NavigateTo("/");
    }

    private void HandleCancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
